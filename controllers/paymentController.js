import axios from "axios";
import crypto from "crypto";
import { Order } from "../models/orderModel.js";
import "dotenv/config";
import mongoose from 'mongoose';


const PAYOS_API_URL = "https://api-merchant.payos.vn";

const createSignature = (data, checksumKey) => {
    const signData = Object.keys(data)
        .filter(key => key !== 'signature') // Lo·∫°i b·ªè signature c≈©
        .sort()
        .map(key => `${key}=${data[key]}`)
        .join('&');

    return crypto
        .createHmac('sha256', checksumKey)
        .update(signData)
        .digest('hex');
};



export const checkout = async (req, res) => {
    const { orderId } = req.body;
    try {
        // üîç T√¨m ƒë∆°n h√†ng
        const order = await Order.findById(orderId);
        if (!order) {
            return res.status(404).json({ success: false, message: "Order not found" });
        }

        // üîπ T·∫°o m√£ ƒë∆°n h√†ng h·ª£p l·ªá
        const orderCode = Math.floor(Math.random() * 1000000000); // S·ªë ng·∫´u nhi√™n 9 ch·ªØ s·ªë
        const paymentId = order._id.toString(); // L·∫•y `_id` l√†m m√£ thanh to√°n

        // üîπ T·∫°o d·ªØ li·ªáu ƒë·ªÉ k√Ω
        const paymentData = {
            orderCode,
            amount: order.priceAfterDiscount || order.totalPrice,
            description: `Thanh to√°n ƒë∆°n ${order._id.toString().slice(-6)}`,
        };

        // üîπ T·∫°o ch·ªØ k√Ω
        const cancelSignature = createSignature(paymentData, process.env.Checksum_Key);

        // üîπ `cancelUrl` v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
        const cancelUrl = `${process.env.FRONTEND_URL}/cancel?orderCode=${orderCode}&id=${paymentId}&status=CANCELLED&signature=${cancelSignature}`;

        // üîπ `returnUrl` v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
        const returnUrl = `${process.env.FRONTEND_URL}/success?orderCode=${orderCode}&id=${paymentId}&status=PAID&signature=${cancelSignature}`;

        // üîπ T·∫°o ch·ªØ k√Ω to√†n b·ªô d·ªØ li·ªáu
        const finalPaymentData = { ...paymentData, cancelUrl, returnUrl };
        finalPaymentData.signature = createSignature(finalPaymentData, process.env.Checksum_Key);

        console.log("üîç Payment Data:", finalPaymentData);

        // üõí **G·ª≠i API PAYOS**
        const response = await axios.post(
            `${PAYOS_API_URL}/v2/payment-requests`,
            finalPaymentData,
            {
                headers: {
                    'x-client-id': process.env.Client_ID,
                    'x-api-key': process.env.API_Key,
                    'Content-Type': 'application/json'
                }
            }
        );

        console.log("‚úÖ PAYOS Response:", response.data);

        if (response.data?.data?.checkoutUrl) {
            res.json({ success: true, paymentUrl: response.data.data.checkoutUrl });
        } else {
            throw new Error('Invalid response from PAYOS');
        }
    } catch (error) {
        console.error('‚ùå Server Error:', error);
        res.status(500).json({ success: false, error: error.message });
    }
};



export const paymentVerification = async (req, res) => {
    const ObjectId = mongoose.Types.ObjectId;

    try {
        const { signature, order, paymentMethod } = req.body;

        // ‚úÖ **N·∫øu l√† COD, c·∫≠p nh·∫≠t ngay ƒë∆°n h√†ng**
        if (paymentMethod === 'COD') {
            const filter = ObjectId.isValid(order.orderCode)
                ? { _id: new ObjectId(order.orderCode) }
                : { orderCode: order.orderCode };

            const orderUpdate = await Order.findOneAndUpdate(
                filter,
                {
                    orderStatus: "COD",
                    'paymentInfo.payosPaymentId': 'COD',
                },
                { new: true }
            );

            if (!orderUpdate) {
                return res.status(404).json({ success: false, message: "Order not found" });
            }

            return res.json({ success: true, order: orderUpdate });
        }

        // ‚úÖ **T·∫°o ch·ªØ k√Ω ƒë·ªÉ x√°c minh**
        const dataToSign = {
            orderCode: order.orderCode,
            status: order.status,
            paymentId: order.paymentId
        };

        const responseSignature = createSignature(dataToSign, process.env.Checksum_Key);

        console.log("Recomputed Signature:", responseSignature);
        console.log("PAYOS Signature:", signature);

        // üî¥ **Ki·ªÉm tra ch·ªØ k√Ω**
        if (responseSignature !== signature) {
            return res.status(400).json({ success: false, message: "Invalid signature" });
        }

        // ‚úÖ **T√¨m ƒë∆°n h√†ng theo `orderCode` ho·∫∑c `_id`**
        const filter = ObjectId.isValid(order.orderCode)
            ? { _id: new ObjectId(order.orderCode) }
            : { orderCode: order.orderCode };

        // ‚úÖ **C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng**
        const orderUpdate = await Order.findOneAndUpdate(
            filter,
            {
                orderStatus: order.status === "PAID" ? "Paid" : "Failed",
                'paymentInfo.payosPaymentId': order.status === "PAID" ? order.paymentId : 'FAILED',
                paidAt: new Date()
            },
            { new: true }
        );

        if (!orderUpdate) {
            return res.status(404).json({ success: false, message: "Order not found" });
        }

        res.json({ success: true, order: orderUpdate });

    } catch (error) {
        console.error("‚ùå Server Error:", error);
        res.status(500).json({ success: false, error: error.message });
    }
};
